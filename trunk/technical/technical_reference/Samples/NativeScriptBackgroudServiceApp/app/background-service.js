"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var geolocation = require("nativescript-geolocation");
var enums_1 = require("tns-core-modules/ui/enums");
var application = require("tns-core-modules/application");
var Toast = require("nativescript-toast");
if (application.android) {
    android.app.Service.extend("com.nativescript.location.BackgroundService", {
        onStartCommand: function (intent, flags, startId) {
            this.super.onStartCommand(intent, flags, startId);
            return android.app.Service.START_STICKY;
        },
        onCreate: function () {
            var that = this;
            geolocation.enableLocationRequest().then(function () {
                that.id = geolocation.watchLocation(function (loc) {
                    if (loc) {
                        var toast = Toast.makeText('Background Location: ' + loc.latitude + ' ' + loc.longitude);
                        toast.show();
                        console.log('Background Location: ' + loc.latitude + ' ' + loc.longitude);
                    }
                }, function (e) {
                    console.log("Background watchLocation error: " + (e.message || e));
                }, {
                    desiredAccuracy: enums_1.Accuracy.high,
                    updateDistance: 0.1,
                    updateTime: 3000,
                    minimumUpdateTime: 100
                });
            }, function (e) {
                console.log("Background enableLocationRequest error: " + (e.message || e));
            });
        },
        onBind: function (intent) {
            console.log("on Bind Services");
        },
        onUnbind: function (intent) {
            console.log('UnBind Service');
        },
        onDestroy: function () {
            console.log('service onDestroy');
            geolocation.clearWatch(this.id);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmFja2dyb3VuZC1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0RBQXdEO0FBQ3hELG1EQUFxRDtBQUNyRCwwREFBNEQ7QUFDNUQsMENBQTRDO0FBRTVDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBUSxDQUFDLE1BQU0sQ0FBQyw2Q0FBNkMsRUFBRTtRQUM3RSxjQUFjLEVBQUUsVUFBVSxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU87WUFDNUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQzVDLENBQUM7UUFDRCxRQUFRLEVBQUU7WUFDTixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7WUFDaEIsV0FBVyxDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxDQUFDO2dCQUNyQyxJQUFJLENBQUMsRUFBRSxHQUFHLFdBQVcsQ0FBQyxhQUFhLENBQy9CLFVBQVUsR0FBRztvQkFDVCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUNOLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsdUJBQXVCLEdBQUcsR0FBRyxDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUN6RixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7d0JBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsR0FBRyxHQUFHLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQzlFLENBQUM7Z0JBQ0wsQ0FBQyxFQUNELFVBQVUsQ0FBQztvQkFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2RSxDQUFDLEVBQ0Q7b0JBQ0ksZUFBZSxFQUFFLGdCQUFRLENBQUMsSUFBSTtvQkFDOUIsY0FBYyxFQUFFLEdBQUc7b0JBQ25CLFVBQVUsRUFBRSxJQUFJO29CQUNoQixpQkFBaUIsRUFBRSxHQUFHO2lCQUN6QixDQUFDLENBQUM7WUFDWCxDQUFDLEVBQUUsVUFBVSxDQUFDO2dCQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsMENBQTBDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0UsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO1FBQ0QsTUFBTSxFQUFFLFVBQVUsTUFBTTtZQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUNELFFBQVEsRUFBRSxVQUFVLE1BQU07WUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFDRCxTQUFTLEVBQUU7WUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDakMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEMsQ0FBQztLQUNKLENBQUMsQ0FBQztBQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBnZW9sb2NhdGlvbiBmcm9tIFwibmF0aXZlc2NyaXB0LWdlb2xvY2F0aW9uXCI7XG5pbXBvcnQgeyBBY2N1cmFjeSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2VudW1zXCI7XG5pbXBvcnQgKiBhcyBhcHBsaWNhdGlvbiBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvblwiO1xuaW1wb3J0ICogYXMgVG9hc3QgZnJvbSBcIm5hdGl2ZXNjcmlwdC10b2FzdFwiO1xuXG5pZiAoYXBwbGljYXRpb24uYW5kcm9pZCkge1xuICAgICg8YW55PmFuZHJvaWQuYXBwLlNlcnZpY2UpLmV4dGVuZChcImNvbS5uYXRpdmVzY3JpcHQubG9jYXRpb24uQmFja2dyb3VuZFNlcnZpY2VcIiwge1xuICAgICAgICBvblN0YXJ0Q29tbWFuZDogZnVuY3Rpb24gKGludGVudCwgZmxhZ3MsIHN0YXJ0SWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3VwZXIub25TdGFydENvbW1hbmQoaW50ZW50LCBmbGFncywgc3RhcnRJZCk7XG4gICAgICAgICAgICByZXR1cm4gYW5kcm9pZC5hcHAuU2VydmljZS5TVEFSVF9TVElDS1k7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBnZW9sb2NhdGlvbi5lbmFibGVMb2NhdGlvblJlcXVlc3QoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGF0LmlkID0gZ2VvbG9jYXRpb24ud2F0Y2hMb2NhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGxvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0b2FzdCA9IFRvYXN0Lm1ha2VUZXh0KCdCYWNrZ3JvdW5kIExvY2F0aW9uOiAnICsgbG9jLmxhdGl0dWRlICsgJyAnICsgbG9jLmxvbmdpdHVkZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3Quc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kIExvY2F0aW9uOiAnICsgbG9jLmxhdGl0dWRlICsgJyAnICsgbG9jLmxvbmdpdHVkZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkJhY2tncm91bmQgd2F0Y2hMb2NhdGlvbiBlcnJvcjogXCIgKyAoZS5tZXNzYWdlIHx8IGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZEFjY3VyYWN5OiBBY2N1cmFjeS5oaWdoLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGlzdGFuY2U6IDAuMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWU6IDMwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtVXBkYXRlVGltZTogMTAwXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkJhY2tncm91bmQgZW5hYmxlTG9jYXRpb25SZXF1ZXN0IGVycm9yOiBcIiArIChlLm1lc3NhZ2UgfHwgZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQmluZDogZnVuY3Rpb24gKGludGVudCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJvbiBCaW5kIFNlcnZpY2VzXCIpO1xuICAgICAgICB9LFxuICAgICAgICBvblVuYmluZDogZnVuY3Rpb24gKGludGVudCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1VuQmluZCBTZXJ2aWNlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3NlcnZpY2Ugb25EZXN0cm95Jyk7XG4gICAgICAgICAgICBnZW9sb2NhdGlvbi5jbGVhcldhdGNoKHRoaXMuaWQpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iXX0=