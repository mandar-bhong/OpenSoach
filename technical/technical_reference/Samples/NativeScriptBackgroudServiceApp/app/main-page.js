"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var geolocation = require("nativescript-geolocation");
var enums_1 = require("ui/enums");
var main_view_model_1 = require("./main-view-model");
var utils = require("tns-core-modules/utils/utils");
var application = require("tns-core-modules/application");
var locationService = require('./background-service');
var page;
var model = new main_view_model_1.MainViewModel();
var watchIds = [];
function pageLoaded(args) {
    page = args.object;
    page.bindingContext = model;
}
exports.pageLoaded = pageLoaded;
function startBackgroundTap() {
    if (application.android) {
        var context = utils.ad.getApplicationContext();
        var intent = new android.content.Intent(context, com.nativescript.location.BackgroundService.class);
        context.startService(intent);
    }
}
exports.startBackgroundTap = startBackgroundTap;
function stopBackgroundTap() {
    if (application.android) {
        var context = utils.ad.getApplicationContext();
        var intent = new android.content.Intent(context, com.nativescript.location.BackgroundService.class);
        context.stopService(intent);
    }
}
exports.stopBackgroundTap = stopBackgroundTap;
function enableLocationTap() {
    geolocation.isEnabled().then(function (isEnabled) {
        if (!isEnabled) {
            geolocation.enableLocationRequest().then(function () {
            }, function (e) {
                console.log("Error: " + (e.message || e));
            });
        }
    }, function (e) {
        console.log("Error: " + (e.message || e));
    });
}
exports.enableLocationTap = enableLocationTap;
function buttonGetLocationTap() {
    var location = geolocation.getCurrentLocation({
        desiredAccuracy: enums_1.Accuracy.high,
        maximumAge: 5000,
        timeout: 10000
    })
        .then(function (loc) {
        if (loc) {
            model.locations.push(loc);
        }
    }, function (e) {
        console.log("Error: " + (e.message || e));
    });
}
exports.buttonGetLocationTap = buttonGetLocationTap;
function buttonStartTap() {
    try {
        watchIds.push(geolocation.watchLocation(function (loc) {
            if (loc) {
                model.locations.push(loc);
            }
        }, function (e) {
            console.log("Error: " + e.message);
        }, {
            desiredAccuracy: enums_1.Accuracy.high,
            updateDistance: 0.1,
            updateTime: 3000,
            minimumUpdateTime: 100
        }));
    }
    catch (ex) {
        console.log("Error: " + ex.message);
    }
}
exports.buttonStartTap = buttonStartTap;
function buttonStopTap() {
    var watchId = watchIds.pop();
    while (watchId != null) {
        geolocation.clearWatch(watchId);
        watchId = watchIds.pop();
    }
}
exports.buttonStopTap = buttonStopTap;
function buttonClearTap() {
    model.locations.splice(0, model.locations.length);
}
exports.buttonClearTap = buttonClearTap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0RBQXdEO0FBQ3hELGtDQUFvQztBQUdwQyxxREFBa0Q7QUFDbEQsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFDdEQsMERBQTREO0FBQzVELElBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBRXRELElBQUksSUFBVSxDQUFDO0FBQ2YsSUFBSSxLQUFLLEdBQUcsSUFBSSwrQkFBYSxFQUFFLENBQUM7QUFDaEMsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBR2xCLG9CQUEyQixJQUFlO0lBQ3RDLElBQUksR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLENBQUM7QUFIRCxnQ0FHQztBQUVEO0lBQ0ksRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDdEIsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQy9DLElBQUksTUFBTSxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BHLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQztBQUNMLENBQUM7QUFORCxnREFNQztBQUVEO0lBQ0ksRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDdEIsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQy9DLElBQUksTUFBTSxHQUFHLElB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LENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFGRCx3Q0FFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGdlb2xvY2F0aW9uIGZyb20gXCJuYXRpdmVzY3JpcHQtZ2VvbG9jYXRpb25cIjtcbmltcG9ydCB7IEFjY3VyYWN5IH0gZnJvbSBcInVpL2VudW1zXCI7XG5pbXBvcnQgeyBFdmVudERhdGEgfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlXCI7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcInVpL3BhZ2VcIjtcbmltcG9ydCB7IE1haW5WaWV3TW9kZWwgfSBmcm9tIFwiLi9tYWluLXZpZXctbW9kZWxcIjtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvdXRpbHMvdXRpbHNcIik7XG5pbXBvcnQgKiBhcyBhcHBsaWNhdGlvbiBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvblwiO1xubGV0IGxvY2F0aW9uU2VydmljZSA9IHJlcXVpcmUoJy4vYmFja2dyb3VuZC1zZXJ2aWNlJyk7XG5cbmxldCBwYWdlOiBQYWdlO1xubGV0IG1vZGVsID0gbmV3IE1haW5WaWV3TW9kZWwoKTtcbmxldCB3YXRjaElkcyA9IFtdO1xuZGVjbGFyZSB2YXIgY29tOiBhbnk7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWdlTG9hZGVkKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gbW9kZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydEJhY2tncm91bmRUYXAoKSB7XG4gICAgaWYgKGFwcGxpY2F0aW9uLmFuZHJvaWQpIHtcbiAgICAgICAgbGV0IGNvbnRleHQgPSB1dGlscy5hZC5nZXRBcHBsaWNhdGlvbkNvbnRleHQoKTtcbiAgICAgICAgbGV0IGludGVudCA9IG5ldyBhbmRyb2lkLmNvbnRlbnQuSW50ZW50KGNvbnRleHQsIGNvbS5uYXRpdmVzY3JpcHQubG9jYXRpb24uQmFja2dyb3VuZFNlcnZpY2UuY2xhc3MpO1xuICAgICAgICBjb250ZXh0LnN0YXJ0U2VydmljZShpbnRlbnQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0b3BCYWNrZ3JvdW5kVGFwKCkge1xuICAgIGlmIChhcHBsaWNhdGlvbi5hbmRyb2lkKSB7XG4gICAgICAgIGxldCBjb250ZXh0ID0gdXRpbHMuYWQuZ2V0QXBwbGljYXRpb25Db250ZXh0KCk7XG4gICAgICAgIGxldCBpbnRlbnQgPSBuZXcgYW5kcm9pZC5jb250ZW50LkludGVudChjb250ZXh0LCBjb20ubmF0aXZlc2NyaXB0LmxvY2F0aW9uLkJhY2tncm91bmRTZXJ2aWNlLmNsYXNzKTtcbiAgICAgICAgY29udGV4dC5zdG9wU2VydmljZShpbnRlbnQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZUxvY2F0aW9uVGFwKCkge1xuICAgIGdlb2xvY2F0aW9uLmlzRW5hYmxlZCgpLnRoZW4oZnVuY3Rpb24gKGlzRW5hYmxlZCkge1xuICAgICAgICBpZiAoIWlzRW5hYmxlZCkge1xuICAgICAgICAgICAgZ2VvbG9jYXRpb24uZW5hYmxlTG9jYXRpb25SZXF1ZXN0KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiICsgKGUubWVzc2FnZSB8fCBlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiICsgKGUubWVzc2FnZSB8fCBlKSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidXR0b25HZXRMb2NhdGlvblRhcCgpIHtcbiAgICBsZXQgbG9jYXRpb24gPSBnZW9sb2NhdGlvbi5nZXRDdXJyZW50TG9jYXRpb24oe1xuICAgICAgICBkZXNpcmVkQWNjdXJhY3k6IEFjY3VyYWN5LmhpZ2gsXG4gICAgICAgIG1heGltdW1BZ2U6IDUwMDAsXG4gICAgICAgIHRpbWVvdXQ6IDEwMDAwXG4gICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGxvYykge1xuICAgICAgICAgICAgaWYgKGxvYykge1xuICAgICAgICAgICAgICAgIG1vZGVsLmxvY2F0aW9ucy5wdXNoKGxvYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiArIChlLm1lc3NhZ2UgfHwgZSkpO1xuICAgICAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1dHRvblN0YXJ0VGFwKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHdhdGNoSWRzLnB1c2goZ2VvbG9jYXRpb24ud2F0Y2hMb2NhdGlvbihcbiAgICAgICAgICAgIGZ1bmN0aW9uIChsb2MpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmxvY2F0aW9ucy5wdXNoKGxvYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogXCIgKyBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkZXNpcmVkQWNjdXJhY3k6IEFjY3VyYWN5LmhpZ2gsXG4gICAgICAgICAgICAgICAgdXBkYXRlRGlzdGFuY2U6IDAuMSxcbiAgICAgICAgICAgICAgICB1cGRhdGVUaW1lOiAzMDAwLFxuICAgICAgICAgICAgICAgIG1pbmltdW1VcGRhdGVUaW1lOiAxMDBcbiAgICAgICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiArIGV4Lm1lc3NhZ2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1dHRvblN0b3BUYXAoKSB7XG4gICAgbGV0IHdhdGNoSWQgPSB3YXRjaElkcy5wb3AoKTtcbiAgICB3aGlsZSAod2F0Y2hJZCAhPSBudWxsKSB7XG4gICAgICAgIGdlb2xvY2F0aW9uLmNsZWFyV2F0Y2god2F0Y2hJZCk7XG4gICAgICAgIHdhdGNoSWQgPSB3YXRjaElkcy5wb3AoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidXR0b25DbGVhclRhcCgpIHtcbiAgICBtb2RlbC5sb2NhdGlvbnMuc3BsaWNlKDAsIG1vZGVsLmxvY2F0aW9ucy5sZW5ndGgpO1xufVxuIl19